# -*- coding: utf-8 -*-
"""TECHIN509_Spencer Zhang_Assignment 3 Loops and Conditionals

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14RAfIdg6BZykys3XTt0ZhEvJMBImT_Cq
"""

#FizzBuzz
#Write a program that prints the numbers from 1 to 100.
#But for multiples of three print “Fizz” instead of the number
#and for the multiples of five print “Buzz”.
#For numbers that are multiples of both three and five, print “FizzBuzz”.

for i in range(1, 101):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)

#Tic-Tac-Toe Game Winner

#Given a board of a tic-tac-toe game,
#find the winner. A sample board is given as follows:

#board = [['O', 'X', 'X'] ,['X', 'X', 'O'],['O', 'X', 'X']]

board = [['O', 'X', 'X'],
         ['X', 'X', 'O'],
         ['O', 'X', 'X']]

def check_winner(board):
    # check rows,columns
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != '':
            return board[i][0]
        if board[0][i] == board[1][i] == board[2][i] != '':
            return board[0][i]
    # check diagonals
    if board[0][0] == board[1][1] == board[2][2] != '':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != '':
        return board[0][2]
    return "Draw"

winner = check_winner(board)
print("Winner is:", winner)

#Password Strenghth Meter
#Write a Python program that reads passwords from users.
#For the given password, tell users whether the password is weak, okay, or strong.

import re

def password_strength(password):
    score = 0

    # according to len, go the points
    if len(password) >= 12:
        score += 2
    elif 8 <= len(password) <= 11:
        score += 1

    # 2️⃣ 字符多样性
    if any(c.islower() for c in password) and any(c.isupper() for c in password):
        score += 1
    if any(c.isdigit() for c in password):
        score += 1
    if any(c in "!@#$%^&*" for c in password):
        score += 1

    # punish
    if any(c.isspace() for c in password):
        score -= 2
    if re.search(r'(.)\1\1', password):
        score -= 3

    # according to score and jump to next result
    if score < 3:
        return "weak"
    elif 3 <= score <= 4:
        return "okay"
    else:
        return "strong"

# test passwords
passwords = ["P@ssw0rd", "hunter2", "CorrectHorseBatteryStaple", "abcde Fgh", "A!!!A!!!A!!!"]

for p in passwords:
    print(p, ":", password_strength(p))

#Vacuum Robot
#N,E,S,W = 0,1,2,3

grid = [
    list("#####"),
    list("#...#"),
    list("#.#S#"),
    list("#...#"),
    list("#####")
]

commands = "FFLFFRFFF"
health = 3

# Change direction to number
direction = 1  # E
dr = [-1, 0, 1, 0]  # N,E,S,W row
dc = [0, 1, 0, -1]  # N,E,S,W column

# start with S
for r in range(len(grid)):
    for c in range(len(grid[0])):
        if grid[r][c] == 'S':
            row, col = r, c

for cmd in commands:
    if health <= 0:
        break
    if cmd == 'L': #make it left= -1
        direction = (direction - 1) % 4
    elif cmd == 'R':#make it right= +1
        direction = (direction + 1) % 4
    elif cmd == 'F':
        nr, nc = row + dr[direction], col + dc[direction]
        if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] != '#':
            row, col = nr, nc
        else:
            health -= 1

# number back to NESW
dir_char = ['N','E','S','W'][direction]
print("Row:", row + 1, "Col:", col + 1, "Direction:", dir_char, "Health:", health)

# Vacuum Robot -Facing West, Health = 10

grid = [
    list("#######"),
    list("#..#..#"),
    list("#.#.#S#"),
    list("#.#...#"),
    list("#..####"),
    list("#.....#"),
    list("#######")
]

commands = "FLLFFFRFFLFFRFF"
health = 10

# Change direction to number
direction = 3  # W
dr = [-1, 0, 1, 0]  # N,E,S,W  row
dc = [0, 1, 0, -1]  # N,E,S,W  column

# start with S
for r in range(len(grid)):
    for c in range(len(grid[0])):
        if grid[r][c] == 'S':
            row, col = r, c

for cmd in commands:
    if health <= 0:
        break
    if cmd == 'L':  # left turn
        direction = (direction - 1) % 4
    elif cmd == 'R':  # right turn(clock)
        direction = (direction + 1) % 4
    elif cmd == 'F':  # forward
        nr, nc = row + dr[direction], col + dc[direction]
        if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] != '#':
            row, col = nr, nc
        else:
            health -= 1

# number back to NESW
dir_char = ['N','E','S','W'][direction]
print("Row:", row + 1, "Col:", col + 1, "Direction:", dir_char, "Health:", health)